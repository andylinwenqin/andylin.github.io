<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Andylin&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/d2d617c7604cf8dda9f78dd0f6fa3899</icon>
  <subtitle>永无止境，奋斗不息</subtitle>
  <link href="https://andylinwenqin.github.io/atom.xml" rel="self"/>
  
  <link href="https://andylinwenqin.github.io/"/>
  <updated>2021-07-18T11:13:36.185Z</updated>
  <id>https://andylinwenqin.github.io/</id>
  
  <author>
    <name>林文钦</name>
    <email>andylin0119@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小程序基础API的使用</title>
    <link href="https://andylinwenqin.github.io/2021/07/17/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80API%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://andylinwenqin.github.io/2021/07/17/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80API%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-07-17T14:14:41.000Z</published>
    <updated>2021-07-18T11:13:36.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础API的使用"><a href="#基础API的使用" class="headerlink" title="基础API的使用"></a>基础API的使用</h1><hr><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="wx-switchTab-Object-object"><a href="#wx-switchTab-Object-object" class="headerlink" title="wx.switchTab(Object object)"></a>wx.switchTab(Object object)</h2><p>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">url</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">需要跳转的 tabBar 页面的路径 (代码包路径)（需在 app.json 的 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#tabbar">tabBar</a> 字段定义的页面），路径后不能带参数。</td></tr><tr><td align="left">success</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用成功的回调函数</td></tr><tr><td align="left">fail</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用失败的回调函数</td></tr><tr><td align="left">complete</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;tabBar&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;list&quot;</span>: [&#123;</span><br><span class="line">      <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;index&quot;</span>,</span><br><span class="line">      <span class="string">&quot;text&quot;</span>: <span class="string">&quot;首页&quot;</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;other&quot;</span>,</span><br><span class="line">      <span class="string">&quot;text&quot;</span>: <span class="string">&quot;其他&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.switchTab(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/index&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="wx-reLaunch-Object-object"><a href="#wx-reLaunch-Object-object" class="headerlink" title="wx.reLaunch(Object object)"></a>wx.reLaunch(Object object)</h2><p>关闭所有页面，打开到应用内的某个页面</p><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">url</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">需要跳转的应用内页面路径 (代码包路径)，路径后可以带参数。参数与路径之间使用?分隔，参数键与参数值用=相连，不同参数用&amp;分隔；如 ‘path?key=value&amp;key2=value2’</td></tr><tr><td align="left">success</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用成功的回调函数</td></tr><tr><td align="left">fail</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用失败的回调函数</td></tr><tr><td align="left">complete</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.reLaunch(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;test?id=1&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  onLoad (option) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(option.query)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="wx-redirectTo-Object-object"><a href="#wx-redirectTo-Object-object" class="headerlink" title="wx.redirectTo(Object object)"></a>wx.redirectTo(Object object)</h2><p>关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。</p><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">url</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">需要跳转的应用内非 tabBar 的页面的路径 (代码包路径), 路径后可以带参数。参数与路径之间使用 <code>?</code> 分隔，参数键与参数值用 <code>=</code> 相连，不同参数用 <code>&amp;</code> 分隔；如 ‘path?key=value&amp;key2=value2’</td></tr><tr><td align="left">success</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用成功的回调函数</td></tr><tr><td align="left">fail</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用失败的回调函数</td></tr><tr><td align="left">complete</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.redirectTo(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;test?id=1&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="wx-navigateTo-Object-object"><a href="#wx-navigateTo-Object-object" class="headerlink" title="wx.navigateTo(Object object)"></a>wx.navigateTo(Object object)</h2><p>保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html">wx.navigateBack</a> 可以返回到原页面。小程序中页面栈最多十层。</p><h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">url</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">需要跳转的应用内非 tabBar 的页面的路径 (代码包路径), 路径后可以带参数。参数与路径之间使用 <code>?</code> 分隔，参数键与参数值用 <code>=</code> 相连，不同参数用 <code>&amp;</code> 分隔；如 ‘path?key=value&amp;key2=value2’</td></tr><tr><td align="left">events</td><td align="left">Object</td><td align="left"></td><td align="left">否</td><td align="left">页面间通信接口，用于监听被打开页面发送到当前页面的数据。基础库 2.7.3 开始支持。</td></tr><tr><td align="left">success</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用成功的回调函数</td></tr><tr><td align="left">fail</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用失败的回调函数</td></tr><tr><td align="left">complete</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><h3 id="object-success-回调函数"><a href="#object-success-回调函数" class="headerlink" title="object.success 回调函数"></a>object.success 回调函数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">eventChannel</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/EventChannel.html">EventChannel</a></td><td align="left">和被打开页面进行通信</td></tr></tbody></table><h3 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;test?id=1&#x27;</span>,</span><br><span class="line">  <span class="attr">events</span>: &#123;</span><br><span class="line">    <span class="comment">// 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据</span></span><br><span class="line">    <span class="attr">acceptDataFromOpenedPage</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">someEvent</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过eventChannel向被打开页面传送数据</span></span><br><span class="line">    res.eventChannel.emit(<span class="string">&#x27;acceptDataFromOpenerPage&#x27;</span>, &#123; <span class="attr">data</span>: <span class="string">&#x27;test&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">option</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(option.query)</span><br><span class="line">    <span class="keyword">const</span> eventChannel = <span class="built_in">this</span>.getOpenerEventChannel()</span><br><span class="line">    eventChannel.emit(<span class="string">&#x27;acceptDataFromOpenedPage&#x27;</span>, &#123;<span class="attr">data</span>: <span class="string">&#x27;test&#x27;</span>&#125;);</span><br><span class="line">    eventChannel.emit(<span class="string">&#x27;someEvent&#x27;</span>, &#123;<span class="attr">data</span>: <span class="string">&#x27;test&#x27;</span>&#125;);</span><br><span class="line">    <span class="comment">// 监听acceptDataFromOpenerPage事件，获取上一页面通过eventChannel传送到当前页面的数据</span></span><br><span class="line">    eventChannel.on(<span class="string">&#x27;acceptDataFromOpenerPage&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="wx-navigateBack-Object-object"><a href="#wx-navigateBack-Object-object" class="headerlink" title="wx.navigateBack(Object object)"></a>wx.navigateBack(Object object)</h2><blockquote><p><strong>以 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html#%E5%BC%82%E6%AD%A5-API-%E8%BF%94%E5%9B%9E-Promise">Promise 风格</a> 调用</strong>：支持</p><p><strong>需要页面权限</strong>：小程序不能在插件页面中调用该接口，插件也不能在小程序页面中调用该接口</p><p><strong>小程序插件</strong>：支持，需要小程序基础库版本不低于 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a></p><p>在小程序插件中使用时，只能在当前插件的页面中调用</p><p><strong>微信 Windows 版</strong>：支持</p><p><strong>微信 Mac 版</strong>：支持</p></blockquote><p>关闭当前页面，返回上一页面或多级页面。可通过 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/getCurrentPages.html">getCurrentPages</a> 获取当前的页面栈，决定需要返回几层。</p><h3 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">delta</td><td align="left">number</td><td align="left">1</td><td align="left">否</td><td align="left">返回的页面数，如果 delta 大于现有页面数，则返回到首页。</td></tr><tr><td align="left">success</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用成功的回调函数</td></tr><tr><td align="left">fail</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用失败的回调函数</td></tr><tr><td align="left">complete</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><h3 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：调用 navigateTo 跳转时，调用该方法的页面会被加入堆栈，而 redirectTo 方法则不会。见下方示例代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处是A页面</span></span><br><span class="line">wx.navigateTo(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;B?id=1&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处是B页面</span></span><br><span class="line">wx.navigateTo(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;C?id=1&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在C页面内 navigateBack，将返回A页面</span></span><br><span class="line">wx.navigateBack(&#123;</span><br><span class="line">  <span class="attr">delta</span>: <span class="number">2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h1><h2 id="wx-navigateToMiniProgram-Object-object"><a href="#wx-navigateToMiniProgram-Object-object" class="headerlink" title="wx.navigateToMiniProgram(Object object)"></a>wx.navigateToMiniProgram(Object object)</h2><p>打开另一个小程序</p><h3 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">appId</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">要打开的小程序 appId</td></tr><tr><td align="left">path</td><td align="left">string</td><td align="left"></td><td align="left">否</td><td align="left">打开的页面路径，如果为空则打开首页。path 中 ? 后面的部分会成为 query，在小程序的 <code>App.onLaunch</code>、<code>App.onShow</code> 和 <code>Page.onLoad</code> 的回调函数或小游戏的 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/navigate/(wx.onShow)">wx.onShow</a> 回调函数、<a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/life-cycle/wx.getLaunchOptionsSync.html">wx.getLaunchOptionsSync</a> 中可以获取到 query 数据。对于小游戏，可以只传入 query 部分，来实现传参效果，如：传入 “?foo=bar”。</td></tr><tr><td align="left">extraData</td><td align="left">object</td><td align="left"></td><td align="left">否</td><td align="left">需要传递给目标小程序的数据，目标小程序可在 <code>App.onLaunch</code>，<code>App.onShow</code> 中获取到这份数据。如果跳转的是小游戏，可以在 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/navigate/(wx.onShow)">wx.onShow</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/life-cycle/wx.getLaunchOptionsSync.html">wx.getLaunchOptionsSync</a> 中可以获取到这份数据数据。</td></tr><tr><td align="left">envVersion</td><td align="left">string</td><td align="left">release</td><td align="left">否</td><td align="left">要打开的小程序版本。仅在当前小程序为开发版或体验版时此参数有效。如果当前小程序是正式版，则打开的小程序必定是正式版。</td></tr><tr><td align="left">success</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用成功的回调函数</td></tr><tr><td align="left">fail</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用失败的回调函数</td></tr><tr><td align="left">complete</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><p><strong>object.envVersion 的合法值</strong></p><table><thead><tr><th align="left">值</th><th align="left">说明</th><th align="left">最低版本</th></tr></thead><tbody><tr><td align="left">develop</td><td align="left">开发版</td><td align="left"></td></tr><tr><td align="left">trial</td><td align="left">体验版</td><td align="left"></td></tr><tr><td align="left">release</td><td align="left">正式版</td><td align="left"></td></tr></tbody></table><h3 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h3><h5 id="需要用户触发跳转"><a href="#需要用户触发跳转" class="headerlink" title="需要用户触发跳转"></a>需要用户触发跳转</h5><p>从 2.3.0 版本开始，若用户未点击小程序页面任意位置，则开发者将无法调用此接口自动跳转至其他小程序。</p><h5 id="需要用户确认跳转"><a href="#需要用户确认跳转" class="headerlink" title="需要用户确认跳转"></a>需要用户确认跳转</h5><p>从 2.3.0 版本开始，在跳转至其他小程序前，将统一增加弹窗，询问是否跳转，用户确认后才可以跳转其他小程序。如果用户点击取消，则回调 <code>fail cancel</code>。</p><h5 id="无需声明跳转名单，不限跳转数量（众测中）"><a href="#无需声明跳转名单，不限跳转数量（众测中）" class="headerlink" title="无需声明跳转名单，不限跳转数量（众测中）"></a>无需声明跳转名单，不限跳转数量（众测中）</h5><ol><li>从2020年4月24日起，使用跳转其他小程序功能将无需在全局配置中声明跳转名单，调用此接口时将不再校验所跳转的 AppID 是否在 navigateToMiniProgramAppIdList 中。</li><li>从2020年4月24日起，跳转其他小程序将不再受数量限制，使用此功能时请注意遵守运营规范。</li></ol><h3 id="运营规范"><a href="#运营规范" class="headerlink" title="运营规范"></a>运营规范</h3><p>平台将坚决打击小程序盒子等互推行为，使用此功能时请严格遵守<a href="https://developers.weixin.qq.com/miniprogram/product/#_5-10-%E4%BA%92%E6%8E%A8%E8%A1%8C%E4%B8%BA">《微信小程序平台运营规范》</a>，若发现小程序违反运营规范将被下架处理。</p><h3 id="关于调试"><a href="#关于调试" class="headerlink" title="关于调试"></a>关于调试</h3><ul><li>在开发者工具上调用此 API 并不会真实的跳转到另外的小程序，但是开发者工具会校验本次调用跳转是否成功。<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/different.html#%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%94%AF%E6%8C%81">详情</a></li><li>开发者工具上支持被跳转的小程序处理接收参数的调试。<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/different.html#%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%94%AF%E6%8C%81">详情</a></li></ul><h3 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateToMiniProgram(&#123;</span><br><span class="line">  <span class="attr">appId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;page/index/index?id=123&#x27;</span>,</span><br><span class="line">  <span class="attr">extraData</span>: &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">envVersion</span>: <span class="string">&#x27;develop&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 打开成功</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="wx-navigateBackMiniProgram-Object-object"><a href="#wx-navigateBackMiniProgram-Object-object" class="headerlink" title="wx.navigateBackMiniProgram(Object object)"></a>wx.navigateBackMiniProgram(Object object)</h2><p>返回到上一个小程序。只有在当前小程序是被其他小程序打开时可以调用成功</p><p>注意：<strong>微信客户端 iOS 6.5.9，Android 6.5.10 及以上版本支持</strong></p><h3 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">extraData</td><td align="left">Object</td><td align="left">{}</td><td align="left">否</td><td align="left">需要返回给上一个小程序的数据，上一个小程序可在 <code>App.onShow</code> 中获取到这份数据。 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html">详情</a>。</td></tr><tr><td align="left">success</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用成功的回调函数</td></tr><tr><td align="left">fail</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用失败的回调函数</td></tr><tr><td align="left">complete</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><h3 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateBackMiniProgram(&#123;</span><br><span class="line">  <span class="attr">extraData</span>: &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 返回成功</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="wx-exitMiniProgram-Object-object"><a href="#wx-exitMiniProgram-Object-object" class="headerlink" title="wx.exitMiniProgram(Object object)"></a>wx.exitMiniProgram(Object object)</h2><p>退出当前小程序。必须有点击行为才能调用成功。</p><h3 id="参数-7"><a href="#参数-7" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">success</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用成功的回调函数</td></tr><tr><td align="left">fail</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用失败的回调函数</td></tr><tr><td align="left">complete</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><h1 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h1><h2 id="wx-setStorageSync-string-key-any-data"><a href="#wx-setStorageSync-string-key-any-data" class="headerlink" title="wx.setStorageSync(string key, any data)"></a>wx.setStorageSync(string key, any data)</h2><blockquote><p><strong>以 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html#%E5%BC%82%E6%AD%A5-API-%E8%BF%94%E5%9B%9E-Promise">Promise 风格</a> 调用</strong>：支持</p><p><strong>小程序插件</strong>：支持，需要小程序基础库版本不低于 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.6</a></p></blockquote><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorage.html">wx.setStorage</a> 的同步版本</p><h3 id="参数-8"><a href="#参数-8" class="headerlink" title="参数"></a>参数</h3><h4 id="string-key"><a href="#string-key" class="headerlink" title="string key"></a>string key</h4><p>本地缓存中指定的 key</p><h4 id="any-data"><a href="#any-data" class="headerlink" title="any data"></a>any data</h4><p>需要存储的内容。只支持原生类型、Date、及能够通过<code>JSON.stringify</code>序列化的对象。</p><h3 id="示例代码-7"><a href="#示例代码-7" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wx.setStorage(&#123;</span><br><span class="line">  <span class="attr">key</span>:<span class="string">&quot;key&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>:<span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  wx.setStorageSync(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="wx-setStorage-Object-object"><a href="#wx-setStorage-Object-object" class="headerlink" title="wx.setStorage(Object object)"></a>wx.setStorage(Object object)</h2><blockquote><p><strong>以 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html#%E5%BC%82%E6%AD%A5-API-%E8%BF%94%E5%9B%9E-Promise">Promise 风格</a> 调用</strong>：支持</p><p><strong>小程序插件</strong>：支持，需要小程序基础库版本不低于 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.6</a></p></blockquote><p>将数据存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。除非用户主动删除或因存储空间原因被系统清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。</p><h3 id="参数-9"><a href="#参数-9" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">key</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">本地缓存中指定的 key</td></tr><tr><td align="left">data</td><td align="left">any</td><td align="left"></td><td align="left">是</td><td align="left">需要存储的内容。只支持原生类型、Date、及能够通过<code>JSON.stringify</code>序列化的对象。</td></tr><tr><td align="left">success</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用成功的回调函数</td></tr><tr><td align="left">fail</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用失败的回调函数</td></tr><tr><td align="left">complete</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><h3 id="示例代码-8"><a href="#示例代码-8" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wx.setStorage(&#123;</span><br><span class="line">  <span class="attr">key</span>:<span class="string">&quot;key&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>:<span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  wx.setStorageSync(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="wx-getStorage-Object-object"><a href="#wx-getStorage-Object-object" class="headerlink" title="wx.getStorage(Object object)"></a>wx.getStorage(Object object)</h2><p>从本地缓存中异步获取指定 key 的内容。缓存相关策略请查看 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/storage.html">存储</a>。</p><h2 id="参数-10"><a href="#参数-10" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">key</td><td align="left">string</td><td align="left"></td><td align="left">是</td><td align="left">本地缓存中指定的 key</td></tr><tr><td align="left">success</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用成功的回调函数</td></tr><tr><td align="left">fail</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用失败的回调函数</td></tr><tr><td align="left">complete</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><h3 id="object-success-回调函数-1"><a href="#object-success-回调函数-1" class="headerlink" title="object.success 回调函数"></a>object.success 回调函数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">data</td><td align="left">any</td><td align="left">key对应的内容</td></tr></tbody></table><h3 id="示例代码-9"><a href="#示例代码-9" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.getStorage(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;key&#x27;</span>,</span><br><span class="line">  success (res) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> value = wx.getStorageSync(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (value) &#123;</span><br><span class="line">    <span class="comment">// Do something with return value</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// Do something when catch error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="wx-getStorageInfo-Object-object"><a href="#wx-getStorageInfo-Object-object" class="headerlink" title="wx.getStorageInfo(Object object)"></a>wx.getStorageInfo(Object object)</h2><p>异步获取当前storage的相关信息。缓存相关策略请查看 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/storage.html">存储</a>。</p><h3 id="参数-11"><a href="#参数-11" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">success</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用成功的回调函数</td></tr><tr><td align="left">fail</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用失败的回调函数</td></tr><tr><td align="left">complete</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><h3 id="object-success-回调函数-2"><a href="#object-success-回调函数-2" class="headerlink" title="object.success 回调函数"></a>object.success 回调函数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">keys</td><td align="left">Array.<string></td><td align="left">当前 storage 中所有的 key</td></tr><tr><td align="left">currentSize</td><td align="left">number</td><td align="left">当前占用的空间大小, 单位 KB</td></tr><tr><td align="left">limitSize</td><td align="left">number</td><td align="left">限制的空间大小，单位 KB</td></tr></tbody></table><h3 id="示例代码-10"><a href="#示例代码-10" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wx.getStorageInfo(&#123;</span><br><span class="line">  success (res) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.keys)</span><br><span class="line">    <span class="built_in">console</span>.log(res.currentSize)</span><br><span class="line">    <span class="built_in">console</span>.log(res.limitSize)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> res = wx.getStorageInfoSync()</span><br><span class="line">  <span class="built_in">console</span>.log(res.keys)</span><br><span class="line">  <span class="built_in">console</span>.log(res.currentSize)</span><br><span class="line">  <span class="built_in">console</span>.log(res.limitSize)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// Do something when catch error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="wx-clearStorage-Object-object"><a href="#wx-clearStorage-Object-object" class="headerlink" title="wx.clearStorage(Object object)"></a>wx.clearStorage(Object object)</h2><p>清理本地数据缓存。缓存相关策略请查看 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/storage.html">存储</a>。</p><h3 id="参数-12"><a href="#参数-12" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">success</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用成功的回调函数</td></tr><tr><td align="left">fail</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用失败的回调函数</td></tr><tr><td align="left">complete</td><td align="left">function</td><td align="left"></td><td align="left">否</td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><h3 id="示例代码-11"><a href="#示例代码-11" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.clearStorage()</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  wx.clearStorageSync()</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="comment">// Do something when catch error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础API的使用&quot;&gt;&lt;a href=&quot;#基础API的使用&quot; class=&quot;headerlink&quot; title=&quot;基础API的使用&quot;&gt;&lt;/a&gt;基础API的使用&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;路由&quot;&gt;&lt;a href=&quot;#路由&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
    <category term="小程序" scheme="https://andylinwenqin.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序登录接口的更新</title>
    <link href="https://andylinwenqin.github.io/2021/07/17/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%9B%B4%E6%96%B0/"/>
    <id>https://andylinwenqin.github.io/2021/07/17/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%9B%B4%E6%96%B0/</id>
    <published>2021-07-17T04:19:31.000Z</published>
    <updated>2021-07-17T14:16:19.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取用户信息（2021-4-28微信更新）"><a href="#获取用户信息（2021-4-28微信更新）" class="headerlink" title="获取用户信息（2021.4.28微信更新）"></a>获取用户信息（2021.4.28微信更新）</h1><hr><h2 id="wx-login"><a href="#wx-login" class="headerlink" title="wx.login"></a>wx.login</h2><p>调用接口获取登录凭证（code）。通过凭证进而换取用户登录态信息，包括用户在当前小程序的唯一标识（openid）、微信开放平台帐号下的唯一标识（unionid，若当前小程序已绑定到微信开放平台帐号）及本次登录的会话密钥（session_key）等。</p><h3 id="object-success-回调函数"><a href="#object-success-回调函数" class="headerlink" title="object.success 回调函数"></a>object.success 回调函数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">code</td><td align="left">string</td><td align="left">用户登录凭证（有效期五分钟）。开发者需要在开发者服务器后台调用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/login/auth.code2Session.html">auth.code2Session</a>，使用 code 换取 openid、unionid、session_key 等信息</td></tr></tbody></table><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wx.login(&#123;</span><br><span class="line">  success (res) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.code) &#123;</span><br><span class="line">      <span class="comment">//发起网络请求</span></span><br><span class="line">      wx.request(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;https://example.com/onLogin&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">          <span class="attr">code</span>: res.code</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;登录失败！&#x27;</span> + res.errMsg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="实际使用代码"><a href="#实际使用代码" class="headerlink" title="实际使用代码"></a>实际使用代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">wx.login(&#123;</span><br><span class="line">  <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    that.globalData.code = res.code</span><br><span class="line">    <span class="built_in">console</span>.log(glo.copy(res))</span><br><span class="line">    <span class="keyword">let</span> u = <span class="string">&#x27;https://golaxy.weiqiai.com:8080/user/authorize&#x27;</span></span><br><span class="line">    that.getData(u, &#123; <span class="attr">js_code</span>: res.code &#125;)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(glo.copy(r))</span><br><span class="line">        that.globalData.openId = r.openid</span><br><span class="line">        <span class="keyword">let</span> session_key = r.session_key;</span><br><span class="line">        <span class="keyword">let</span> u = <span class="string">&#x27;https://golaxy.weiqiai.com:8080/user/getUserInfo&#x27;</span></span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        success(<span class="literal">false</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 发送 res.code 到后台换取 openId, sessionKey, unionId</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>拿到了openId等信息</p><h2 id="wx-getUserProfile"><a href="#wx-getUserProfile" class="headerlink" title="wx.getUserProfile"></a>wx.getUserProfile</h2><p>获取用户信息。页面产生点击事件（例如 <code>button</code> 上 <code>bindtap</code> 的回调中）后才可调用，每次请求都会弹出授权窗口，用户同意后返回 <code>userInfo</code>。该接口用于替换 <code>wx.getUserInfo</code>，</p><p><strong>这个函数只能通过点击事件触发</strong></p><h3 id="object-success-回调函数-1"><a href="#object-success-回调函数-1" class="headerlink" title="object.success 回调函数"></a>object.success 回调函数</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th><th align="left">最低版本</th></tr></thead><tbody><tr><td align="left">userInfo</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/UserInfo.html">UserInfo</a></td><td align="left">用户信息对象</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.10.4</a></td></tr><tr><td align="left">rawData</td><td align="left">string</td><td align="left">不包括敏感信息的原始数据字符串，用于计算签名</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.10.4</a></td></tr><tr><td align="left">signature</td><td align="left">string</td><td align="left">使用 sha1( rawData + sessionkey ) 得到字符串，用于校验用户信息，详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html">用户数据的签名验证和加解密</a></td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.10.4</a></td></tr><tr><td align="left">encryptedData</td><td align="left">string</td><td align="left">包括敏感数据在内的完整用户信息的加密数据，详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95">用户数据的签名验证和加解密</a></td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.10.4</a></td></tr><tr><td align="left">iv</td><td align="left">string</td><td align="left">加密算法的初始向量，详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95">用户数据的签名验证和加解密</a></td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.10.4</a></td></tr><tr><td align="left">cloudID</td><td align="left">string</td><td align="left">敏感数据对应的云 ID，开通<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html">云开发</a>的小程序才会返回，可通过云调用直接获取开放数据，详细见<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#method-cloud">云调用直接获取开放数据</a></td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.10.4</a></td></tr></tbody></table><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><p><a href="https://developers.weixin.qq.com/s/tsJaq2mP7Mp4">在开发者工具中预览效果</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;userinfo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;!hasUserInfo&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;canIUseGetUserProfile&#125;&#125;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;getUserProfile&quot;</span>&gt;</span> 获取头像昵称 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">wx:else</span> <span class="attr">open-type</span>=<span class="string">&quot;getUserInfo&quot;</span> <span class="attr">bindgetuserinfo</span>=<span class="string">&quot;getUserInfo&quot;</span>&gt;</span> 获取头像昵称 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:else</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">bindtap</span>=<span class="string">&quot;bindViewTap&quot;</span> <span class="attr">class</span>=<span class="string">&quot;userinfo-avatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;userInfo.avatarUrl&#125;&#125;&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;cover&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;userinfo-nickname&quot;</span>&gt;</span>&#123;&#123;userInfo.nickName&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">userInfo</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">hasUserInfo</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">canIUseGetUserProfile</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">onLoad</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (wx.getUserProfile) &#123;</span><br><span class="line">      <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">        <span class="attr">canIUseGetUserProfile</span>: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">getUserProfile</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 推荐使用wx.getUserProfile获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认</span></span><br><span class="line">    <span class="comment">// 开发者妥善保管用户快速填写的头像昵称，避免重复弹窗</span></span><br><span class="line">    wx.getUserProfile(&#123;</span><br><span class="line">      <span class="attr">desc</span>: <span class="string">&#x27;用于完善会员资料&#x27;</span>, <span class="comment">// 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写</span></span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">          <span class="attr">userInfo</span>: res.userInfo,</span><br><span class="line">          <span class="attr">hasUserInfo</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">getUserInfo</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 不推荐使用getUserInfo获取用户信息，预计自2021年4月13日起，getUserInfo将不再弹出弹窗，并直接返回匿名的用户个人信息</span></span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      <span class="attr">userInfo</span>: e.detail.userInfo,</span><br><span class="line">      <span class="attr">hasUserInfo</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="实际使用代码-1"><a href="#实际使用代码-1" class="headerlink" title="实际使用代码"></a>实际使用代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wx.getUserProfile(&#123;</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> userInfo = res.userInfo || &#123;&#125;</span><br><span class="line">    wx.setStorageSync(<span class="string">&#x27;userInfo&#x27;</span>, userInfo)</span><br><span class="line">    <span class="comment">// that.globalData.userInfo = userInfo</span></span><br><span class="line">    <span class="built_in">this</span>.userInfoSet()</span><br><span class="line">    success(userInfo)</span><br><span class="line">    <span class="comment">// that.globalData.loged = true</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><p>虽然微信这个变动让很多小程序开发者苦不堪言，但是还是很方便的，之前的方式是wx.login获取code给wx.getUserInfo去拿取session_key和openid，然后传给后端，后端去请求用户个人信息，对此很多程序员都封装了组件，类似套娃的方法去实现。</p><p>在这次更新后，wx.getUserProfile取缔wx.getUserInfo，wx.getUserProfile必须用点击事件触发例如bindtap(),之前的’套娃组件‘也都要废弃，改成了更加简单的方式，封装一个函数，在app.js页面一开始调用wx.login获取openid。然后在写一个button点击事件bindtap()调用wx.getUserProfile获取以下信息</p><p><img src="https://raw.githubusercontent.com/andylinwenqin/Picgo/main/img/20210717131151.png"></p><p>然后前端在调用接口传个后端存进数据库</p>]]></content>
    
    
    <summary type="html">解决一个大家都头疼的问题(可能只有我头大吧哈哈哈)</summary>
    
    
    
    
    <category term="小程序" scheme="https://andylinwenqin.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>单工,半双工,全双工三者区别</title>
    <link href="https://andylinwenqin.github.io/2021/07/11/%E5%8D%95%E5%B7%A5-%E5%8D%8A%E5%8F%8C%E5%B7%A5-%E5%85%A8%E5%8F%8C%E5%B7%A5%E4%B8%89%E8%80%85%E5%8C%BA%E5%88%AB/"/>
    <id>https://andylinwenqin.github.io/2021/07/11/%E5%8D%95%E5%B7%A5-%E5%8D%8A%E5%8F%8C%E5%B7%A5-%E5%85%A8%E5%8F%8C%E5%B7%A5%E4%B8%89%E8%80%85%E5%8C%BA%E5%88%AB/</id>
    <published>2021-07-11T07:10:38.000Z</published>
    <updated>2021-07-11T07:15:35.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单工-半双工-全双工三者区别"><a href="#单工-半双工-全双工三者区别" class="headerlink" title="单工 半双工 全双工三者区别"></a>单工 半双工 全双工三者区别</h1><hr><h2 id="单工"><a href="#单工" class="headerlink" title="单工"></a>单工</h2><p>单工就是指A只能发信号，而B只能接收信号，通信是单向的，就象灯塔之于航船-灯塔发出光信号而航船只能接收信号以确保自己行驶在正确的航线上。 </p><h2 id="半双工（Half-Duplex）"><a href="#半双工（Half-Duplex）" class="headerlink" title="半双工（Half Duplex）"></a>半双工（Half Duplex）</h2><p>半双工就是指A能发信号给B，B也能发信号给A，但这两个过程不能同时进行。最典型的例子就象我们在影视作品中看到的对讲机一样： </p><p>007：呼叫总部，请求支援，OVER  </p><p>总部：收到，增援人员将在5分钟内赶到，OVER  </p><p>007：要5分钟这么久？！要快呀！OVER  </p><p>总部：„„  </p><p>在这里，每方说完一句话后都要说个OVER，然后切换到接收状态，同时也告之对方-你可以发言了。如果双方同时处于收状态，或同时处于发状态，便不能正常通信了。 </p><h2 id="全双工-（Full-Duplex）"><a href="#全双工-（Full-Duplex）" class="headerlink" title="全双工 （Full Duplex）"></a>全双工 （Full Duplex）</h2><p>全双工比半双工又进了一步。在A给B发信号的同时，B也可以给A发信号。典型的例子就是打电话。<br>A：我跟你说呀„„<br>B：你先听我说，情况是这样的„„<br>A和B在说的同时也能听到对方说的内容，这就是全双工。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://blog.csdn.net/erwangshi/article/details/44940069">原文链接</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单工-半双工-全双工三者区别&quot;&gt;&lt;a href=&quot;#单工-半双工-全双工三者区别&quot; class=&quot;headerlink&quot; title=&quot;单工 半双工 全双工三者区别&quot;&gt;&lt;/a&gt;单工 半双工 全双工三者区别&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;单工&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
    <category term="通信机制" scheme="https://andylinwenqin.github.io/tags/%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Stomp</title>
    <link href="https://andylinwenqin.github.io/2021/07/06/STOMP/"/>
    <id>https://andylinwenqin.github.io/2021/07/06/STOMP/</id>
    <published>2021-07-06T11:12:57.000Z</published>
    <updated>2021-07-17T03:15:40.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习血汗史"><a href="#学习血汗史" class="headerlink" title="学习血汗史"></a>学习血汗史</h2><p>查了各类资料花了整整三天才学通，又被跨域卡了一天，直到第五天才完完全全跑通，下一步学习emoji的表情包用法</p><hr><h2 id="stomp-over-websocket协议原理"><a href="#stomp-over-websocket协议原理" class="headerlink" title="stomp over websocket协议原理"></a>stomp over websocket协议原理</h2><h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><p>http协议是单工的, 只能由client发请求再由server返回请求结果, 在http协议中server是不能主动发请求到client的.</p><p>大多数情况下http协议都是适用的, 但当遇到在线聊天, 股票行情这样需要实时获取取服务端信息的应用时, client需要频繁轮询server<br>过程如下:</p><blockquote><p>client 建立连接<br>client 问server有没有新的消息, 并根据返回结果进行处理<br>client 关闭连接<br>client 建立连接<br>client 问server有没有新的消息, 并根据返回结果进行处理<br>client 关闭连接<br>…</p></blockquote><p>为了拿到最新信息, client一直这样循环下去<br>server如果一直没有新的消息, client的大多请求都是无效的, 效率低下.</p><p>为了提高效率需要有一种协议可以让server主动发消息给client.<br>这样就不需要client频繁轮询, 只要server有新消息就会主动推送给client.</p><p>这种协议就是websocket协议(效果：服务端主动向客户端发送信息).</p><h3 id="websocket协议"><a href="#websocket协议" class="headerlink" title="websocket协议"></a>websocket协议</h3><p>webSocket协议是基于TCP的一种网络协议。它实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端。<br>在webscoket协议中, client利用http来建立tcp连接, 建立tcp连接之后, client与server就可以基于tcp连接来愉快的进行通信了.</p><p>那么webscoket如何利用http建立连接的呢?</p><p>先看一个经典图示</p><p><img src="https://raw.githubusercontent.com/andylinwenqin/Picgo/main/img/20210702154116.png"></p><h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><h5 id="client与server是利用http的一次request-response来建立连接的"><a href="#client与server是利用http的一次request-response来建立连接的" class="headerlink" title="client与server是利用http的一次request, response来建立连接的."></a>client与server是利用http的一次request, response来建立连接的.</h5><p>其中http request消息体如下:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/echo</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">Host:jingxu.test.com:8100</span><br><span class="line">Origin:http://jingxu.test.com:8099</span><br><span class="line">Sec-WebSocket-Extensions:permessage-deflate; client_max_window_bits</span><br><span class="line">Sec-WebSocket-Key:rVX0XFeQzA9QVXXEfjm0yw==</span><br><span class="line">Sec-WebSocket-Version:13</span><br><span class="line">Upgrade:websocket</span><br></pre></td></tr></table></figure><p>其中前三个header:Get, Host, Origin都是http协议之前就有, 不多做解释, 主要解释一下后面这几个header<br>Sec-WebSocket-Extensions: 用于对websocket协议进行扩展. 比如websocket协议本身不支持压缩, 但可以通过Sec-WebSocket-Extensions中的permessage-deflate来协商压缩.<br>Sec-WebSocket-Key:client随机生成的一段key. 详情之后response中Sec-WebSocket-Accept的解释.<br>Sec-WebSocket-Version:协议的版本号<br>Upgrade:通过http的Upgrade对协议进行切换. 告诉server, 建立连接后用websocket协议.</p><p>http response消息体如下:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Connection:upgrade</span><br><span class="line">Date:Mon, 04 Dec 2017 10:05:18 GMT</span><br><span class="line">Sec-WebSocket-Accept:q3dUKg4lRGCqqRhGIvmE7sH8Yuc=</span><br><span class="line">Sec-WebSocket-Extensions:permessage-deflate;client_max_window_bits=15</span><br><span class="line">Upgrade:websocket</span><br></pre></td></tr></table></figure><p>Connection与Date都是http协议之前就有的header, 主要解释一下后面的.<br>Sec-WebSocket-Accept:对应于request中的Sec-WebSocket-Key.<br>server会根据request中的Sec-WebSocket-Key的值来生成response中的Sec-WebSocket-Accept的值.<br>具体的算法是根据Sec-WebSocket-Key与协议中已定义的一个guid “258EAFA5-E914-47DA-95CA-C5AB0DC85B11”进行拼接<br>再对结果进行sha1, 再对sha1的结果进行base64, 最后得到Sec-WebSocket-Accept的值.</p><h5 id="client通过验证server返回的Sec-WebSocket-Accept的值-来确定两件事情"><a href="#client通过验证server返回的Sec-WebSocket-Accept的值-来确定两件事情" class="headerlink" title="client通过验证server返回的Sec-WebSocket-Accept的值, 来确定两件事情:"></a>client通过验证server返回的Sec-WebSocket-Accept的值, 来确定两件事情:</h5><p>server理解websocket协议.<br>如果server不理解, 那么server不会返回正确的Sec-WebSocket-Accept.<br>如果server没有返回正确的Sec-WebSocket-Accept, 那么建立websocket连接失败.</p><p>server返回的response是对于client的此次reuqest的响应而不是之前的缓存.<br>主要是防止有些缓存服务器返回缓存的response.</p><p>发送数据<br>现在websocket连接已经建立, 由于websocket没有规范payload的格式, 所以应用需要自己去定义payload的格式.</p><p>websocket的payload可以是文本也可以是二进制.<br>应用一般会选择用文本.<br>这个文本是什么格式websocket协议本身并没有规定, 由应用自己来定.</p><p>比如我要请求发送消息这个接口, 那么我的payload可以写成:</p><p><code>/send | params=我是消息</code></p><p>这里我自己定义了一个格式, 中坚线之前的是要调用的地址, 中竖线之后是参数.<br>由于格式是自己定义的, 所以在服务端我也需要自己写代码来解析这个格式.<br>把/send路由到相应的处理方法.</p><p>那有没有一种统一的协议呢? 统一的标准呢?<br>因为这样就会有相应的已经实现的库来解析路由, 而不用自己去写, 自己去定义格式.</p><p>这个统一的协议就是stomp协议(一个基于webSocket的通信协议或者说一种标准).</p><h3 id="stomp协议"><a href="#stomp协议" class="headerlink" title="stomp协议"></a>stomp协议</h3><p><strong>stomp是一个用于client之间进行异步消息传输的简单文本协议, 全称是Simple Text Oriented Messaging Protocol.</strong></p><blockquote><p>对于stomp协议来说, client分为消费者client与生产者client两种. server是指broker, 也就是消息队列的管理者.</p></blockquote><p>stomp协议并不是为websocket设计的, 它是属于消息队列的一种协议, 和amqp, jms平级.<br>只不过由于它的简单性恰巧可以用于定义websocket的消息体格式.<br>stomp协议很多mq都已支持, 比如rabbitmq, activemq. 很多语言也都有stomp协议的解析client库.</p><p>可以这么理解, websocket结合stomp相当于一个面向公网对用户比较友好的一种消息队列.</p><p>stomp协议中的client分为两角色:</p><blockquote><p>生产者: 通过<code>SEND</code>命令给某个目的地址(destination)发送消息.</p><p>消费者: 通过<code>SUBSCRIBE</code>命令订阅某个目的地址(destination), 当生产者发送消息到目的地址后, 订阅此目的地址的消费者会即时收到消息.</p></blockquote><p>stomp协议的结构与http结构相似, 结构如下:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COMMAND</span><br><span class="line">header1:value1 </span><br><span class="line">header2:value2 </span><br><span class="line"></span><br><span class="line">Body^@</span><br></pre></td></tr></table></figure><p><strong>其中^@代表null结尾.</strong></p><p>与http相似有三部分组成: 命令, header, 消息体.<br>命令与header使用utf-8格式, body可以是二进制也可以是文本.</p><p>命令有SEND, SUBSCRIBE, MESSAGE, CONNECT, CONNECTED等.</p><p>header类似http有content-length, content-type等.<br>消息体类似http可以是二进制也可以是文本.</p><p>下面例举一些主要命令<br>和http, websocket类似, 首先要确认双方都懂stomp这个协议, 通过建立连接来确认.<br>由于我们已经建立了webscoket连接, 接下来我只需要在webscoket连接的基础上建立stomp连接.</p><p>将以下内容写到websocket的payload中, 来发送建立stomp连接请求</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONNECT</span><br><span class="line">accept-version:1.2</span><br><span class="line">host:stomp.github.org</span><br><span class="line"></span><br><span class="line">^@</span><br></pre></td></tr></table></figure><p>stomp协议并不与websocket协议耦合, 比如双方建立了tcp连接, 那么完成可以在tcp连接上建立stomp连接, 也就是将上述内容写到tcp的payload中.</p><p>server收到后回复, 同样以下内容是在server回复的websocket的消息体中</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONNECTED</span><br><span class="line">version:1.2 </span><br><span class="line"></span><br><span class="line">^@</span><br></pre></td></tr></table></figure><p>这样一个stomp连接就建立了, 协议版本为1.2.</p><p>由于stomp连接是一个长连接, stomp协议定义了发送心跳来监测stomp连接是否存活.</p><p>在CONNECT命令消息中加入heart-beat心跳header来建立连接就开启了心跳:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CONNECT </span><br><span class="line">accept-version:1.2 </span><br><span class="line">heart-beat:&lt;cx&gt;,&lt;cy&gt; </span><br><span class="line">host:stomp.github.org </span><br><span class="line"></span><br><span class="line">^@</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONNECTED </span><br><span class="line">version:1.2</span><br><span class="line">heart-beat:&lt;sx&gt;,&lt;sy&gt;</span><br><span class="line"></span><br><span class="line">^@</span><br></pre></td></tr></table></figure><p>其中<code>&lt;cx&gt;, &lt;cy&gt;, &lt;sx&gt;, &lt;sy&gt;</code>分别代表一个以毫秒为单位的数字.</p><p>client发送的CONNECT命令消息中的<code>&lt;cx&gt;,&lt;cy&gt;</code>分别代表:</p><p><code>&lt;cx&gt;</code>:client能保证的发送心跳的最小间隔, 如果是0代表client不发送心跳.<br><code>&lt;cy&gt;</code>:client希望收到server心跳的间隔, 如果是0代表client不希望收到server的心跳.<br>与client类似, server发送的CONNECTED命令消息中的<sx>,<sy>分别代表:</p><p><code>&lt;sx&gt;</code>:server能保证的发送心跳的最小间隔, 如果是0代表server不发送心跳.</p><p><code>&lt;sy&gt;</code>:server希望收到client心跳的间隔, 如果是0代表server不希望收到client的心跳</p><p>如果在建立连接时没有心跳header, 默认当作heart-beat:0,0. 也就是不发心跳, 也不希望对方发心跳.</p><p>加入心跳header进行连接后, 最终协商得出发送心跳的频率的逻辑如下:<br>对于client来说, 取<cx>与<sy>的最大值, 也就是说client会取client最小能发送的间隔与server希望client发送间隔的最大值来发送心跳.<br>如果<cx>或<sy>中任何一个为0, client都不发送心跳.</p><p>类似, 对于server来说, 取<sx>与<cy>的最大值, 也就是说server取server最小能发送的间隔与client希望server发送间隔的最大值来发送心跳.<br>如果<sx>或<cy>中任何一个为0, server都不发送心跳.</p><p>举个例子, 如下建立连接</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CONNECT</span><br><span class="line">accept-version:1.2</span><br><span class="line">heart-beat:1000,2000</span><br><span class="line">host:stomp.github.org</span><br><span class="line"></span><br><span class="line">^@123456</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONNECTED</span><br><span class="line">version:1.2</span><br><span class="line">heart-beat:3000,4000</span><br><span class="line"></span><br><span class="line">^@</span><br></pre></td></tr></table></figure><p>上述, client发送CONNECT命令消息中heart-beat为1000, 2000.<br>解释为client最小能保证发送心跳间隔为1000毫秒, 希望server发送心跳间隔为2000毫秒</p><p>server回复的CONNECTED命令消息中heart-beat为3000,4000<br>解释为server最小能保证发送心跳间隔为3000毫秒, 希望client发送心跳间隔为4000毫秒</p><p>最终的协商结果, client取自己能保证的最小心跳间隔1000毫秒与server希望client发送心跳间隔4000毫秒的最大值<br>得出client会每4000毫秒发一次心跳,</p><p>同理, server取自己能保证的最小心跳间隔3000毫秒与client希望server发送心跳间隔2000毫秒的最大值<br>得出server会每3000毫秒发一次心跳.</p><p>client和server根据心跳来判定对方已经挂掉了的逻辑如下:</p><p>以server为例, 假设经过协商, client每10秒发送一个心跳.</p><p>client必须在10秒以内给server至少发送一次数据, 不管是心跳还是正常数据.<br>如果在10秒内client未发送数据, 那么server认为与client的stomp连接已经挂掉.<br>现在连接已经建立, 接下来准备发送stomp消息.</p><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><p>发送消息使用SEND这个COMMAND, 如下:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SEND</span><br><span class="line">destination:/topic/a </span><br><span class="line">content-type:text/plain </span><br><span class="line"></span><br><span class="line">hello world</span><br><span class="line">^@</span><br></pre></td></tr></table></figure><p>其中destination这个header的值为发送消息的目的地址.<br>上述SEND命令消息的意思为, 给/topic/a这个目的地址发送一条类型为text/plain, 内容是hello world的消息.<br>所有订阅/topic/a这个目的地址的消费者client都会收到hello world这条消息.</p><blockquote><p>stomp协议并没有规定destination的格式, 这个是由使用stomp协议的应用自己来定义.<br>比如, /topic/a, /queue/a, queue.a, topic.a, topic-a, queue-a对于stomp协议来说都是正确的.<br>应用可以自己规定不同的格式以及此格式代表的含义.<br>比如, 应用自己可以定义以/topic打头的为发布订阅模式, 消息会被所有消费者client收到,<br>以/queue打头的为负载平衡模式, 只会被一个消费都client收到.</p></blockquote><p>client发送SEND命令消息如何确保server收到了这条消息呢?</p><p>协议规定, 可以在SEND命令消息中加入receipt header. receipt header的值唯一确定一次send.<br>server收到有receipt header的SEND命令消息后, 需要回复一个RECEIPT命令消息,<br>里面会包含receipt-id header, receipt-id的值就是SEND命令消息中receipt header的值.<br>这样当client收到了这条RECEIPT命令消息后, 就能确定server已收到SEND命令消息. 例如:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SEND</span><br><span class="line">destination:/queue/a</span><br><span class="line">receipt:message-12345</span><br><span class="line"></span><br><span class="line">hello queue a^@12345</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RECEIPT</span><br><span class="line">receipt-id:message-12345</span><br><span class="line"></span><br><span class="line">^@</span><br></pre></td></tr></table></figure><p>接下来看一下消费者client如何订阅消息.</p><h4 id="订阅消息"><a href="#订阅消息" class="headerlink" title="订阅消息"></a>订阅消息</h4><p>订阅消息用SUBSCRIBE命令, 如下:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SUBSCRIBE </span><br><span class="line">id:0  </span><br><span class="line">destination:/topic/foo  </span><br><span class="line">ack:client </span><br><span class="line"></span><br><span class="line">^@</span><br></pre></td></tr></table></figure><p>上述代表client订阅/topic/foo这个目的地址.<br>其中多了两个新的header: id与ack.</p><p><strong>订阅中的id header</strong><br>此id能唯一确定一个订阅.<br>一个client对于一个server可以订阅多次, 甚至对于同一个目的地址都可以订阅多次.<br>为了唯一确定一次订阅, 协议规定必须包含id header, 此id要求在同一连接中唯一.</p><p><strong>订阅中的ack header</strong><br>ack header告诉server, server如何确认client已经收到消息.<br>有三个值: <code>auto</code>, <code>client</code>, <code>client-individual</code></p><p><code>auto</code>表示当server发出消息后就立即确认client收到了消息. 也就是说当<code>client</code>收到消息后不会对server进行确认.<br><code>client</code>表示只有当server收到client的ack后才确认client收到了消息, 也就是说client需要对server发ack进行确认.<br>这个确认是累积的, 意思是说收到某条消息的ack, 那么这条消息之前的所有的消息, server都认为client已收到.<br><code>client-individual</code>与client类似. 只不过不是累积的. 每收到一条消息都需要给server回复ack来确认.</p><p>有订阅消息, 那肯定有取消订阅消息.</p><h4 id="取消订阅"><a href="#取消订阅" class="headerlink" title="取消订阅"></a>取消订阅</h4><p>取消订阅用UNSUBSCRIBE这个命令</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UNSUBSCRIBE</span><br><span class="line">id:0</span><br><span class="line"></span><br><span class="line">^@</span><br></pre></td></tr></table></figure><p>取消订阅相对来说比较简单只需要传一个id header.<br>这个id header的值来自订阅时id header值. 这样server才能唯一确定到底要取消哪个订阅.</p><p>当有生产者client给目的地址发消息后, 首先server会收到消息, server收到消息后会把消息发送给所有订阅这个目的地址的client, 那么server是如何发送这个消息到消费都client的呢?</p><h4 id="server发送消息"><a href="#server发送消息" class="headerlink" title="server发送消息"></a>server发送消息</h4><p>server发送消息用MESSAGE这个命令来给client发送消息, 如下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MESSAGE</span><br><span class="line">subscription:0</span><br><span class="line">message-id:007</span><br><span class="line">destination:/queue/a</span><br><span class="line">content-type:text/plain</span><br><span class="line"></span><br><span class="line">hello queue a^@</span><br></pre></td></tr></table></figure><p>message-id这个header的值能唯一确定一条消息<br>subscription的值就是订阅时SUBSCRIBE命令中id header的值, 表示这条消息属于哪个订阅.</p><p>到此, 介绍了一些stomp常用的命令, 还有一些其他命令, 有兴趣可以查看<a href="https://stomp.github.io/stomp-specification-1.2.html">stomp协议文档</a>:</p><h3 id="协议总结"><a href="#协议总结" class="headerlink" title="协议总结"></a>协议总结</h3><p>由于http是一个单工的协议, server不能主动发送消息给client, 导致http在处理实时性要求高的应用时效率不高.</p><p>为了提高效率, 我们使用了全双工的websocket协议, 可以让server主动推送消息.</p><p>又由于websocket协议是个底层协议, 不是应用层协议, 未对payload的格式进行规范, 导致我们需要自己定义消息体格式, 自己解析消息体, 成本高, 扩展性也不好, 所以我们引入了已被很多库和消息队列厂商实现的stomp协议, 将websocket协议与stomp协议结合.</p><p>我们再总结一下websocket与stomp的优点</p><h4 id="websocket相对于http的优点"><a href="#websocket相对于http的优点" class="headerlink" title="websocket相对于http的优点:"></a>websocket相对于http的优点:</h4><p>全双工. 相对于http协议只能由client发送消息. 全双工的websocket协议, server与client都可以发送消息.<br>消息体更轻量. http的一个请求比websocket的请求大不少. 主要因为http的每次请求都要加很多的header.</p><h4 id="stomp-over-websocket相对于websocket的优点"><a href="#stomp-over-websocket相对于websocket的优点" class="headerlink" title="stomp over websocket相对于websocket的优点:"></a>stomp over websocket相对于websocket的优点:</h4><p>不需要自己去规定消息的格式, 以及对消息的格式做解析.<br>由于stomp是一个统一的标准, 有很多库与厂商都对stomp协议进行了支持. 拿来用就可以. 成本低, 扩展好.<br>理论到此为止, 接下来我们一起了解下spring websocket是如何实现stomp over websocket协议的.</p><h2 id="Stomp使用文档-官方文档翻译版"><a href="#Stomp使用文档-官方文档翻译版" class="headerlink" title="Stomp使用文档(官方文档翻译版)"></a>Stomp使用文档(官方文档翻译版)</h2><p>STOMP即Simple (or Streaming) Text Orientated Messaging Protocol，简单(流)文本定向消息协议，它提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理（Broker）进行交互。STOMP协议由于设计简单，易于开发客户端，因此在多种语言和多种平台上得到广泛地应用。</p><h3 id="创建STOMP客户端"><a href="#创建STOMP客户端" class="headerlink" title="创建STOMP客户端"></a>创建<code>STOMP</code>客户端</h3><h4 id="在web浏览器中使用普通的Web-Socket"><a href="#在web浏览器中使用普通的Web-Socket" class="headerlink" title="在web浏览器中使用普通的Web Socket"></a>在web浏览器中使用普通的Web Socket</h4><p>　　STOMP javascript 客户端会使用<code>ws://</code>的URL与STOMP 服务端进行交互。</p><p>　　为了创建一个STOMP客户端js对象，你需要使用<code>Stomp.client(url)</code>，而这个URL连接着服务端的WebSocket的代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;ws://localhost:61614/stomp&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> client = Stomp.client(url);</span><br></pre></td></tr></table></figure><p><code>　　Stomp.client(url, protocols)</code>也可以用来覆盖默认的<code>subprotocols</code>。第二个参数可以是一个字符串或一个字符串数组去指定多个<code>subprotocols</code>。</p><h4 id="在web浏览器中使用定制的WebSocket"><a href="#在web浏览器中使用定制的WebSocket" class="headerlink" title="在web浏览器中使用定制的WebSocket"></a>在web浏览器中使用定制的WebSocket</h4><p>　　浏览器提供了不同的WebSocket的协议，一些老的浏览器不支持WebSocket的脚本或者使用别的名字。默认下，<code>stomp.js</code>会使用浏览器原生的<code>WebSocket class</code>去创建WebSocket。</p><p>　　但是利用<code>Stomp.over(ws)</code>这个方法可以使用其他类型的WebSockets。这个方法得到一个满足WebSocket定义的对象。</p><p>　　例如，可以使用由<code>SockJS</code>实现的Websocket。</p><p>　　如果使用原生的Websockets就使用<code>Stomp.client(url)</code>，如果需要使用其他类型的Websocket（例如由SockJS包装的Websocket）就使用<code>Stomp.over(ws)</code>。除了初始化有差别，Stomp API在这两种方式下是相同的。</p><h4 id="在node-js程序中"><a href="#在node-js程序中" class="headerlink" title="在node.js程序中"></a>在<code>node.js</code>程序中</h4><p>　　通过<code>stompjs npm package</code>同样也可以在<code>node.js</code>程序中使用这个库。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install stompjs</span><br></pre></td></tr></table></figure><p>　　在node.js <code>app</code>中，<code>require</code>这个模块：<code>var Stomp = require(&#39;stompjs&#39;);</code></p><p>　　为了与建立在TCP socket的STOMP-broker连接，使用<code>Stomp.overTCP(host, port)</code>方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = Stomp.overTCP(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">61613</span>);</span><br></pre></td></tr></table></figure><p>　　为了与建立在Web Socket的STOMP broker连接，使用<code>Stomp.overWS(url)</code>方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = Stomp.overWS(<span class="string">&#x27;ws://localhost:61614/stomp&#x27;</span>);</span><br></pre></td></tr></table></figure><p>　　除了初始化不同，无论是浏览器还是node.js环境下，Stomp API都是相同的。</p><h3 id="连接服务端"><a href="#连接服务端" class="headerlink" title="连接服务端"></a>连接服务端</h3><p>　　一旦Stomp 客户端建立了，必须调用它的<code>connect()</code>方法去连接Stomp服务端进行验证。这个方法需要两个参数，用户的登录和密码凭证。这种情况下，客户端会使用Websocket打开连接，并发送一个<code>CONNECT frame</code>。</p><p>　　这个连接是异步进行的：你不能保证当这个方法返回时是有效连接的。为了知道连接的结果，你需要一个回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connect_callback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// called back after the client is connected and authenticated to the STOMP server</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>　　但是如果连接失败会发生什么呢？</p><p>　　<code>connect()</code>方法接受一个可选的参数(<code>error_callback</code>)，当客户端不能连接上服务端时，这个回调函数<code>error_callback</code>会被调用，该函数的参数为对应的错误对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var error_callback = function(error) &#123;</span><br><span class="line">    // display the error&#x27;s message header:</span><br><span class="line">    alert(error.headers.message);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>　　在大多数情况下，<code>connect()</code>方法可接受不同数量的参数来提供简单的API：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">client.connect(login, passcode, connectCallback);</span><br><span class="line">client.connect(login, passcode, connectCallback, errorCallback);</span><br><span class="line">client.connect(login, passcode, connectCallback, errorCallback, host);</span><br></pre></td></tr></table></figure><p><code>　　login</code>和<code>passcode</code>是strings，<code>connectCallback</code>和<code>errorCallback</code>则是functions。（有些brokers（代理）还需要传递一个<code>host</code>（String类型）参数。）</p><p>　　如果你需要附加一个<code>headers</code>头部，<code>connect</code>方法还接受其他两种形式的参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client.connect(headers, connectCallback);</span><br><span class="line">client.connect(headers, connectCallback, errorCallback);</span><br></pre></td></tr></table></figure><p><code>　　header</code>是<code>map</code>形式，<code>connectCallback</code>和<code>errorCallback</code>为functions。</p><p>　　需要注意：如果你使用上述这种方式，你需要自行在<code>headers</code>添加<code>login</code>、<code>passcode</code>（甚至<code>host</code>）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> headers = &#123;</span><br><span class="line">    <span class="attr">login</span>: <span class="string">&#x27;mylogin&#x27;</span>,</span><br><span class="line">    <span class="attr">passcode</span>: <span class="string">&#x27;mypasscode&#x27;</span>,</span><br><span class="line">    <span class="comment">// additional header</span></span><br><span class="line">    <span class="string">&#x27;client-id&#x27;</span>: <span class="string">&#x27;my-client-id&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">client.connect(headers, connectCallback);</span><br></pre></td></tr></table></figure><p>　　断开连接时，调用<code>disconnect</code>方法，这个方法也是异步的，当断开成功后会接收一个额外的回调函数的参数。如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">client.disconnect(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;See you next time!&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>　　当客户端与服务端断开连接，就不会再发送或接收消息了。</p><h3 id="Heart-beating-心跳"><a href="#Heart-beating-心跳" class="headerlink" title="Heart-beating(心跳)"></a>Heart-beating(心跳)</h3><p>　　如果STOMP broker(代理)接收STOMP 1.1版本的帧，<code>heart-beating</code>是默认启用的。</p><p>　　<code>heart-beating</code>也就是频率，<code>incoming</code>是接收频率，<code>outgoing</code>是发送频率。通过改变<code>incoming</code>和<code>outgoing</code>可以更改客户端的<code>heart-beating</code>(默认为10000ms)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">client.heartbeat.outgoing = <span class="number">20000</span>; </span><br><span class="line"><span class="comment">// client will send heartbeats every 20000ms</span></span><br><span class="line">client.heartbeat.incoming = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// client does not want to receive heartbeats</span></span><br><span class="line"><span class="comment">// from the server</span></span><br></pre></td></tr></table></figure><p><code>　　heart-beating</code>是利用<code>window.setInterval()</code>去规律地发送<code>heart-beats</code>或者检查服务端的<code>heart-beats</code>。</p><h3 id="发送消息-1"><a href="#发送消息-1" class="headerlink" title="发送消息"></a>发送消息</h3><p>　　当客户端与服务端连接成功后，可以调用<code>send()</code>来发送STOMP消息。这个方法必须有一个参数，用来描述对应的STOMP的目的地。另外可以有两个可选的参数：<code>headers</code>，<code>object</code>类型包含额外的信息头部；<code>body</code>，一个String类型的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client.send(<span class="string">&quot;/queue/test&quot;</span>, &#123;<span class="attr">priority</span>: <span class="number">9</span>&#125;, <span class="string">&quot;Hello, STOMP&quot;</span>);</span><br><span class="line"><span class="comment">// client会发送一个STOMP发送帧给/queue/test，这个帧包含一个设置了priority为9的header和内容为“Hello, STOMP”的body。</span></span><br></pre></td></tr></table></figure><p>　　如果你想发送一个有<code>body</code>的信息，也必须传递<code>headers</code>参数。如果没有<code>headers</code>需要传递，那么就传<code>&#123;&#125;</code>即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.send(destination, &#123;&#125;, body);</span><br></pre></td></tr></table></figure><h3 id="订阅（Subscribe）和接收（receive）消息"><a href="#订阅（Subscribe）和接收（receive）消息" class="headerlink" title="订阅（Subscribe）和接收（receive）消息"></a>订阅（Subscribe）和接收（receive）消息</h3><p>　　为了在浏览器中接收消息，STOMP客户端必须先订阅一个目的地<code>destination</code>。</p><p>　　你可以使用<code>subscribe()</code>去订阅。这个方法有2个必需的参数：目的地(<code>destination</code>)，回调函数(<code>callback</code>)；还有一个可选的参数<code>headers</code>。其中<code>destination</code>是String类型，对应目的地，回调函数是伴随着一个参数的<code>function</code>类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subscription = client.subscribe(<span class="string">&quot;/queue/test&quot;</span>, callback);</span><br></pre></td></tr></table></figure><p><code>　　subscribe()</code>方法返回一个<code>object</code>，这个<code>object</code>包含一个<code>id</code>属性，对应这个这个客户端的订阅ID。</p><p>　　而<code>unsubscribe()</code>可以用来取消客户端对这个目的地<code>destination</code>的订阅。</p><p>　　默认情况下，如果没有在<code>headers</code>额外添加，这个库会默认构建一个独一无二的<code>ID</code>。在传递<code>headers</code>这个参数时，可以使用你自己的<code>ID</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysubid = <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> subscription = client.subscribe(destination, callback, &#123; <span class="attr">id</span>: mysubid &#125;);</span><br></pre></td></tr></table></figure><p>　　这个客户端会向服务端发送一个STOMP订阅帧（<code>SUBSCRIBE frame</code>）并注册回调事件。每次服务端向客户端发送消息时，客户端都会轮流调用回调函数，参数为对应消息的STOMP帧对象（<code>Frame object</code>）。</p><p><code>　　subscribe()</code>方法，接受一个可选的<code>headers</code>参数用来标识附加的头部。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> headers = &#123;<span class="attr">ack</span>: <span class="string">&#x27;client&#x27;</span>, <span class="string">&#x27;selector&#x27;</span>: <span class="string">&quot;location = &#x27;Europe&#x27;&quot;</span>&#125;;</span><br><span class="line">client.subscribe(<span class="string">&quot;/queue/test&quot;</span>, message_callback, headers);</span><br></pre></td></tr></table></figure><p>　　这个客户端指定了它会确认接收的信息，只接收符合这个<code>selector : location = &#39;Europe&#39;</code>的消息。</p><p>　　如果想让客户端订阅多个目的地，你可以在接收所有信息的时候调用相同的回调函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// called every time the client receives a message</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sub1 = client.subscribe(<span class="string">&quot;queue/test&quot;</span>, onmessage);</span><br><span class="line"><span class="keyword">var</span> sub2 = client.subscribe(<span class="string">&quot;queue/another&quot;</span>, onmessage)</span><br></pre></td></tr></table></figure><p>　　如果要中止接收消息，客户端可以在<code>subscribe()</code>返回的<code>object</code>对象调用<code>unsubscribe()</code>来结束接收。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subscription = client.subscribe(...);</span><br><span class="line">...</span><br><span class="line">subscription.unsubscribe();</span><br></pre></td></tr></table></figure><h3 id="支持JSON"><a href="#支持JSON" class="headerlink" title="支持JSON"></a>支持JSON</h3><p>　　STOMP消息的<code>body</code>必须为字符串。如果你需要发送/接收<code>JSON</code>对象，你可以使用<code>JSON.stringify()</code>和<code>JSON.parse()</code>去转换JSON对象。</p><h3 id="确认-Acknowledgment"><a href="#确认-Acknowledgment" class="headerlink" title="确认(Acknowledgment)"></a>确认(Acknowledgment)</h3><p>　　默认情况，在消息发送给客户端之前，服务端会自动确认（<code>acknowledged</code>）。</p><p>　　客户端可以选择通过订阅一个目的地时设置一个<code>ack header</code>为<code>client</code>或<code>client-individual</code>来处理消息确认。</p><p>　　在下面这个例子，客户端必须调用<code>message.ack()</code>来通知服务端它已经接收了消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subscription = client.subscribe(<span class="string">&quot;/queue/test&quot;</span>,</span><br><span class="line">    <span cla